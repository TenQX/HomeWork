#include <iostream>
using namespace std;

template <typename T>
class DynamicArray {
private:
    T* arr;
    int size;

public:
    DynamicArray() {
        size = 0;
        arr = nullptr;
    }

    ~DynamicArray() {
        delete[] arr;
    }

    void add(T num) {
        T* newArr = new T[size + 1];
        for (int i = 0; i < size; i++) {
            newArr[i] = arr[i];
        }

        newArr[size] = num;
        delete[] arr;
        arr = newArr;
        size++;
    }

    int Size() {
        return size;
    }

    void print() {
        for (int i = 0; i < size; i++) {
            cout << arr[i] << " ";
        }
        cout << endl;
    }
    void removeLast() {
         T* newArr = new T[size - 1];

         for (int i = 0; i < size - 1; i++) {
             newArr[i] = arr[i];
         }

         delete[] arr;
         arr = newArr;
         size--;
    }
    void clear() {
        delete[] arr;
        arr = nullptr;
    }
};
    int main() {
        DynamicArray<int> myArray;

        myArray.add(12);
        myArray.add(21);
        myArray.add(11);

        cout << "massiv: ";
        myArray.print();

        cout << "massiv size: " << myArray.Size() << endl;

        myArray.removeLast();
        cout << "after delete lastNum: ";
        myArray.print();

        myArray.clear();
        cout << "clear massiv: ";
        myArray.print();

    }