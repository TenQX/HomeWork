#pragma once
#include<iostream>
using namespace std;

template<typename T>
class Bin {
private:
    struct TreeNode {
        T data;
        TreeNode* left;
        TreeNode* right;
    };
    TreeNode* root;
public:
    Bin() { root = nullptr; }
    ~Bin();
    void insert(T value);
    bool remove(T value);
    bool find(T value);
    void print();
    void print(TreeNode* node);
};



















#include "Bin.h"

template<typename T>
Bin<T>::~Bin() {
    if (root == nullptr) return;
    queue<TreeNode*> q;
    q.push(root);
    while (!q.empty()) {
        TreeNode* node = q.front();
        q.pop();
        if (node->left != nullptr) q.push(node->left);
        if (node->right != nullptr) q.push(node->right);
        delete node;
    }
}

template<typename T>
void Bin<T>::insert(T value) {
    if (root == nullptr) {
        root = new TreeNode;
        root->data = value;
        return;
    }
    TreeNode* current = root;
    while (true) {
        if (value < current->data) {
            if (current->left == nullptr) {
                current->left = new TreeNode;
                current->left->data = value;
                break;
            }
            else {
                current = current->left;
            }
        }
        else if (value > current->data) {
            if (current->right == nullptr) {
                current->right = new TreeNode;
                current->right->data = value;
                break;
            }
            else {
                current = current->right;
            }
        }
        else {
            break;
        }
    }
}

template<typename T>
bool Bin<T>::remove(T value) {
    if (root == nullptr) return false;
    TreeNode* current = root;
    TreeNode* parent = nullptr;
    while (current != nullptr && current->data != value) {
        parent = current;
        if (value < current->data) current = current->left; else current = current->right;
    }
    if (current == nullptr) return false;
    else if (current->left == nullptr && current->right == nullptr) {
        if (parent == nullptr) root = nullptr; else {
            if (parent->left == current) parent->left = nullptr; else parent->right = nullptr;
        }
        delete current;
        return true;
    }
    else if (current->left == nullptr || current->right == nullptr) {
        if (parent == nullptr) root = current->left ? current->left : current->right; else {
            if (parent->left == current) parent->left = current->left ? current->left : current->right; else parent->right = current->left ? current->left : current->right;
        }
        delete current;
        return true;
    }
    else {
        TreeNode* successor = current->right ? current->right : current->left;
        if (successor->left == nullptr) successor->left = current->left; else successor->left = successor->left->left;
        successor->right = current->right;
        if (parent == nullptr) root = successor; else {
            if (parent->left == current) parent->left = successor; else parent->right = successor;
        }
        delete current;
        return true;
    }
}

template<typename T>
bool Bin<T>::find(T value) {
    TreeNode* current = root;
    while (current != nullptr && current->data != value) {
        if (value < current->data) current = current->left; else current = current->right;
    }
    return current != nullptr && current->data == value;
}

template<typename T>
void Bin<T>::print() {
    if (root == nullptr) {
        cout << "Бинарное дерево пустое" << endl;
        return;
    }
    print(root);
}

template<typename T>
void Bin<T>::print(TreeNode* node) {
    if (node == nullptr)
        return;

    print(node->left);
    cout << node->data << endl;
    print(node->right);
}
